조건문 

if문과 switch ~ case 구문

제어문은 프로그램을 인위적으로 조작해 프로그램의 흐름을 제어한다.



1. if문


if문은 if, 조건식, 문장으로 구성되며
if문만 쓸 수 도 있고
if else
if else if else
등으로 여러가지 조건을 파악할 수 있다.


if문은 1문장을 수행하려면 중괄호가 필요하지 않지만
여러 문장을 실행하기 위해 {}으로 감쌀 필요가 있다.

ex) if(조건식) 문장1;

if(조건식){
  문장1;
  문장2;
}

만약 2문장을 {} 없이 if문으로 사용하면
첫번째 문장만 조건이 참이면 수행되고,
두번째 문장은 조건의 참,거짓 상관없이 항상 수행된다.





다중 if문

다중 if문에 관한 토론

<대화> a,b

a : 다중 if문은 일반 if문에 비해 어떤 점이 좋은 것 같아?

b : 나는 어떤 차이가 있는지 잘 모르겠어.

다중if문
if (input > = 0){
if(input % 2 = = 0){
printf("입력한 수 %d는 양수이며 짝수입니다.\n", input);
else
printf("입력한 수 %d는 양수이며 홀수입니다.\n", input);
}

if   else if문
if(input > = 0 && input % 2 = = 0)
printf("입력한 수 %d는 양수이며 짝수입니다.\n", input);
else if(input > = 0 && input % 2 ! = 0)
printf("입력한 수 %d는 양수이며 홀수입니다.\n", input);
else
printf("입력한 수 %d는 음수입니다.\n")

a : 그래? 우선 예시 문장을 한번 보자. 둘 다 3문장으로 문장의 개수는 같아
    그런데 조건을 보면 조건이 다중 if문에서는 1개뿐이고
    else if를 사용하면 계속 0보다 크거나 같다 라는 조건을 추가해야해

b : 아하! 불필요한 조건을 계속해서 추가하지 않아도 되는구나!

a : 그렇기때문에 나중에 코드가 길어지거나하면 최적화에 도움이 되.

<대화 끝>





2. switch ~ case문 

switch ~ case문의 기본적인 형태는 이러하다.


switch(조건식){

case 상숫값_1:
    명령1;
    break;

case 상숫값_2:
    명령2;
    break;

case 상숫값_3:
    명령3;
    break;

default:
    명령4;
    break;

}


switch문은 조건식의 "결과값"과 "상숫값"이 일치하면
case 아래 명령을 수행하고 break문으로 명령을 빠져나온다.
만약 상숫값과 일치하지 않으면 default 명령을 수행한다.
break문이 없다면 아래명령을 모두 수행하고 빠져나온다.



switch문을 활용하여 if문으로 만들었던 점수를 입력받아서 성적 평가하기

<대화> a,b

a : if문으로 만들었던 성적처리를 switch문으로 바꾸는 문제야

b : 일단 switch문의 형태를 만들어놓고 if문과 비교해보자

a : if는 조건식의 참,거짓에 따라 문장을 수행하는데
    switch는 조건식이 상수로 나와 상숫값을 비교해야해

b : 범위로 나오니까 케이스를 하나하나 따지기엔 너무 많아

a : int 연산에서 / 는 나머지를 버리니까 99/10을 하면 9가 되어 A니까
    90~99 a | 80~89 b | 70~79 c| 60~69 d 가 가능해

b : 그리고 100은 10으로 처리해서 a로 하고, 59 아래는 default로
    f 와 재수강을 출력시키면 되겠네

<대화 끝>




3. 조건연산자

조건연산자는 유일하게 피연산자가 3개인 삼항연산자이다.

조건연산자의 기본형식

(문장 1) ? (문장 2) : (문장 3);

문장1이 참이면 문장2를 수행하고 아니면 문장3을 수행한다.

ex)
int a;

a = ( 12 > 4 ) ? 1 : 0;
printf("%d",a);

출력결과 : 1






교재 166p 연습문제 08번

<대화> a,b

a : 우선 문제를 정의해야겠어 switch~case를 사용해서
    나이별로 제공되는 서비스를 출력하는게 목표야

b : 20~29까지 20대고,30~39까지 30대니까 10으로 나누어 case를 분류해야겠어(age/10)

a : 50대 이상은 모두 1년간 데이터 매달 1G니까 50대이상은 따로 처리해야해

b : 그럼 if문을 써서 50대 이상은 모두 5로 처리해야겠다.

a : 그리고 20대와 30대의 제공서비스가 같으니까
   
   case 3:
   case 2:
         printf("1년간 데이터 매달 1G,6개월 통신요금 10%할인\n");
         break;
  로 하면 최적화를 더 잘 시킬 수 있어.

b : 그럼 40대와 50대의 순서를 바꿔서 "3개월 통신요금 10%할인"만 추가해도 되지.
   case 4:
	   printf("3개월 통신요금 10%할인");
	break;
  case 5:
	   printf("1년간 데이터 매달 1G\n");
	break;

a : 아니. 내가 예전에 switch문이 돌아가는 방식에 대해 assembly어로 보니까
    case 값은 1씩 순차적으로 내려가거나 올라가는 방식이 가장 최적화를 잘 시킨다고
    들었어. 그러니까 둘 중 하나만 하면 될 것 같아.

b : 알았어. 그러면 커피쿠폰은 default로 예외처리해서 맞지 않는 값이 나오면
    커피쿠폰 서비스를 줄게

<대화 끝>
