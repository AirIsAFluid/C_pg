조건문 

if문과 switch ~ case 구문

제어문은 프로그램을 인위적으로 조작해 프로그램의 흐름을 제어한다.



1. if문


if문은 if, 조건식, 문장으로 구성되며
if문만 쓸 수 도 있고
if else
if else if else
등으로 여러가지 조건을 파악할 수 있다.


if문은 1문장을 수행하려면 중괄호가 필요하지 않지만
여러 문장을 실행하기 위해 {}으로 감쌀 필요가 있다.

ex) if(조건식) 문장1;

if(조건식){
  문장1;
  문장2;
}

만약 2문장을 {} 없이 if문으로 사용하면
첫번째 문장만 조건이 참이면 수행되고,
두번째 문장은 조건의 참,거짓 상관없이 항상 수행된다.





다중 if문

다중 if문에 관한 토론

<대화> a,b

a : 다중 if문은 일반 if문에 비해 어떤 점이 좋은 것 같아?

b : 나는 어떤 차이가 있는지 잘 모르겠어.

a : 그래? 우선 예시 문장을 한번 보자. 둘 다 3문장으로 문장의 개수는 같아
    그런데 조건을 보면 조건이 다중 if문에서는 1개뿐이고
    else if를 사용하면 계속 0보다 크거나 같다 라는 조건을 추가해야해

b : 아하! 불필요한 조건을 계속해서 추가하지 않아도 되는구나!

a : 그렇기때문에 나중에 코드가 길어지거나하면 최적화에 도움이 되.

<대화 끝>





2. switch ~ case문 

switch ~ case문의 기본적인 형태는 이러하다.


switch(조건식){

case 상숫값_1:
    명령1;
    break;

case 상숫값_2:
    명령2;
    break;

case 상숫값_3:
    명령3;
    break;

default:
    명령4;
    break;

}


switch문은 조건식의 "결과값"과 "상숫값"이 일치하면
case 아래 명령을 수행하고 break문으로 명령을 빠져나온다.
만약 상숫값과 일치하지 않으면 default 명령을 수행한다.
break문이 없다면 아래명령을 모두 수행하고 빠져나온다.



switch문을 활용하여 if문으로 만들었던 점수를 입력받아서 성적 평가하기

<대화> a,b

a : if문으로 만들었던 성적처리를 switch문으로 바꾸는 문제야

b : 일단 switch문의 형태를 만들어놓고 if문과 비교해보자

a : if는 조건식의 참,거짓에 따라 문장을 수행하는데
    switch는 조건식이 상수로 나와 상숫값을 비교해야해

b : 범위로 나오니까 케이스를 하나하나 따지기엔 너무 많아

a : int 연산에서 / 는 나머지를 버리니까 99/10을 하면 9가 되어 A니까
    90~99 a | 80~89 b | 70~79 c| 60~69 d 가 가능해

b : 그리고 100은 10으로 처리해서 a로 하고, 59 아래는 default로
    f 와 재수강을 출력시키면 되겠네

<대화 끝>





