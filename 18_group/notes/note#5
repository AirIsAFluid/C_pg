반복문 for while

반복문은 반복적인 작업을 시행할 때 일의 능률을 올리기 위해 사용된다.

for문 기본형식

int i
for(i=0;i<10;i++)
  printf("******\n");

1.i=0으로 초기화를 시행한 후
2.i<10이라는 조건식을 만족하면
3.for문 아래의 명령을 시행한다.
4.이후 i++라는 증감식을 시행한 뒤
다시 2.조건식을 검사하고 3.명령을 시행한다.
4.증감식을 시행한 뒤 2. 조건식을 만족하지 않을 때
for문을 빠져나온다.

<소문자 a~z까지 출력하기>
(대화 a,b)

a : 우선 a~z까지 어떻게 출력할지 생각해야해

b : %c로 출력하면 소문자 알파벳을 출력할 수 있어.

a : a~z까지의 아스키코드를 구하는게 먼저겠네
    검색한 결과 소문자 a의 아스키코드는 97이고 b는 98으로 연속적으로
    아스키코드가 배열되어있어.

b : 그러면 초기값을 97로 지정하고 i<123를 조건식으로 해서 i++로 증가시키면서 %c로 출력하면 되겠네.

a : 그런 방법도 있지만 printf("%c",97+i)로 명령식을 두고
    반복문의 초기값을 i=0,i<26으로 할 수도 있지.

(끝)




소문자를 대문자로 바꾸어 출력하기
(대화 a,b)

a : 소문자를 대문자로 바꾸는 함수를 찾고 이를 만든 식에 적용해보자

b : 검색한 결과 toupper(문자열) 함수를 사용하면 소문자를 대문자로 출력할 수 있네
    printf("%c",toupper(97+i))를 한 결과 프로그램이 실행되지 않네

a : 이 함수는 #include <ctype.h>를 적어야 함수를 가져올 수 있어
    표준 입출력 라이브러리 stdio.h에 내장된 함수가 아니야

b : 아! 함수를 사용하려면 함수가 어떤 라이브러리에 있는지 확인하는게 중요하구나.

(끝)


<중첩 for문의 이해>
(대화 a,b)

a : 중첩 for문이 어떻게 돌아가는지 알겠어?

b : 말로 정확히 말하기는 힘들지만 조건식을 검사해서 명령을 실행하고
    중첩된 for문도 동일하게 실행하고 반복이 끝나면 
    바깥의 for문으로 다시 돌아와서 i를 1증가시키고
    조건을 검사하는 걸 반복하는 거 아닌가?

a : 맞아 내가 중첩 for 문을 번호를 붙여서 설명해줄게
    for(1.초기화; 2.조건식; 7.증감식) {
       for(3.초기화; 4.조건식; 6.증감식) {
          5.명령문 1;
             ⋮
           }
     } 

일단 내부에 for문이 없다고 가정하면 1 27 27 27 27 2(조건식을 만족하지x 경우)야
내부의 for문을 1,2,7번의 명령이라고 보면 
1 2 ( 3 456 456 456 4(조건식을 만족하지x 경우)) 7 2(조건식을 만족하면 내부 for문 반복, 아니면 탈출)
이런식으로 프로그램이 작동되

간단히 말해서 for문의 명령문이 또 다른 for문으로 들어가 있는 형태로 보면 돼

b : 예제문제로 몇 번 연습하면 자유자재로 쓸 수 있을 것 같아.

(끝)



<중첩 for문 연습문제1,2,3>
(대화 a,b)

a : 중첩 for문을 이용하여 1+1=2,1+2=3...3+3=6을 출력해보자

b : 일단 피연산자 앞의 값이 111,222,333이고
    뒤의 값은 123123123으로 반복적이야

a : 반복되는 게 두 개니까 이중 반복문을 활용하면 되겠네

b : int i,j;
for(i=1;i<=3;i++){
for(j=1;j<=3;j++){
printf("%d + %d = %d\n",i,j,i*j);
}
}
로 할 수 있겠네



a : 두번째 문제는 첫번째 줄에는 한 개, 두번째 줄에는 두 개...다섯번째 줄에는 다섯 개의 별을 출력하는 예제야
    *
    **
    ***
    ****
    *****

b : 일단 별을 동일하게 다섯 번 출력하려면 for문 1개가 필요해
    그리고 1줄에는 1개 2줄에는 2개가 있으려면 이중 for문을 써야해

a : i와 j는 독립적인 관계가 아니니까 조건식에 j를 i에 제한시키게 프로그래밍해야지

b : int i,j;
    for(i=0;i<5;i++){
    for(j=0;j<=i;j++){
    printf("*");
    printf("\n");
    }
    }
 이러면 되나?

a : printf("\n")을 내부for문 밖에 둬서 별을 다 출력한 뒤 줄을 바꿔야지

b : 실수했네. 이러면 잘 출력되네


a : 마지막 문제는 소수구하기 문제야.
    이번에는 코드를 직접 짜지 않고 내부 로직을 이해해보자.

    소수의 정의를 먼저 내려야지 소수는 1과 자기자신으로만 나누어 떨어지는 수야.

b : 그러니까 2,3,5,7은 소수고, 4,6,8,9는 소수가 아니네

a : for문을 어떻게 사용했는지 보자
    일단 바깥 for는 2~1000까지의 숫자를 검사하는데 사용되고있어
    안쪽의 for문은 j<i까지 검사하고 있어.
    내부의 if문은 i가 j로 나누어떨어지면 break;
    내부의 if문으로 for문이 빠져나와진다면 i!=j이므로 소수가 아니고
    그렇지않다면 i==j니까 소수로 출력이 돼.

b : 그런데 "%s",count%5 ? " " : "\n" 은 뭐지?

a : 음... %s니까 배우진 않았지만 
